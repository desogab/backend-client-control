generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active            Boolean?          @default(true)
  sponsor           Boolean?          @default(false)
  name              String            @db.VarChar(50)
  birthdate         DateTime          @db.Date
  cpf               String            @unique @db.VarChar(14)
  email             String            @unique @db.VarChar(100)
  phone             String            @unique @db.VarChar(15)
  consultationPrice Decimal           @map("consultation_price") @db.Money
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime?         @updatedAt @map("updated_at")
  professionalId    String            @map("professional_id") @db.Uuid
  professionalUser  ProfessionalUser  @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  clientAddress     ClientAddress?
  clientEmergency   ClientEmergency?
  clientSponsor     ClientSponsor?
  consultationInfo  ConsultationInfo?

  @@map("client")
}

model ClientAddress {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  street     String    @db.VarChar(100)
  district   String    @db.VarChar(50)
  number     Int       @db.SmallInt
  city       String    @db.VarChar(50)
  complement String    @db.VarChar(25)
  state      String    @db.Char(2)
  zipcode    String    @db.VarChar(25)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  clientId   String    @unique @map("client_id") @db.Uuid
  client     Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_address")
}

model ClientEmergency {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @db.VarChar(50)
  phone     String    @db.VarChar(15)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  clientId  String    @unique @map("client_id") @db.Uuid
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_emergency")
}

model ClientSponsor {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @db.VarChar(50)
  cpf       String    @unique @db.VarChar(14)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  clientId  String?   @unique @map("client_id") @db.Uuid
  client    Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_sponsor")
}

model ConsultationInfo {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dateVisit        DateTime         @map("date_visit") @db.Date
  hoursVisit       DateTime         @map("hours_visit") @db.Time(6)
  model            String?          @db.VarChar(15)
  professionalId   String           @unique @map("professional_id") @db.Uuid
  clientId         String           @unique @map("client_id") @db.Uuid
  client           Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professionalUser ProfessionalUser @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("consultation_info")
}

model ProfessionalInfo {
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String           @db.VarChar(50)
  birthdate            DateTime         @db.Date
  cpf                  String           @unique @db.VarChar(14)
  email                String           @unique @db.VarChar(100)
  phone                String           @unique @db.VarChar(15)
  profession           String           @db.VarChar(50)
  professionalDocument String           @unique @map("professional_document") @db.VarChar(50)
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime?        @updatedAt @map("updated_at")
  professionalUserId   String           @unique @map("professional_user_id") @db.Uuid
  professionalUser     ProfessionalUser @relation(fields: [professionalUserId], references: [id], onDelete: Cascade)

  @@map("professional_info")
}

model ProfessionalUser {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String            @unique
  password         String
  client           Client[]
  consultationInfo ConsultationInfo?
  ProfessionalInfo ProfessionalInfo?

  @@map("professional_user")
}
